max_norm <-sapply(max_normalthird, as.numeric)
max_normalthird
View(max_normalthird)
View(max_normalthird)
max_normalization<-function(x)
{
norms<-(x-min(x))/(max(x)-min(x))
return(norms)
}
z_normalization <-function(x){
mu <- mean(x)
sigma <- sd(x)
z <- (x-mu)/sigma
return(z)
}
# Third max normal
max_normalthird <- data.frame(cbind(sapply(third[1:(length(third)-1)], max_normalization), target = third$target))
max_norm <-sapply(max_normalthird, as.numeric)
type(max_normalthird$android.sensor.accelerometer.mean)
class(max_normalthird$android.sensor.accelerometer.mean)
class(max_normal$android.sensor.accelerometer.mean)
max_normalthird[1:37]
max_norm <- sapply(max_normalthird[1:37], as.numeric)
View(max_norm)
View(max_norm)
max_norm <- data.frame(sapply(max_normalthird[1:37], as.numeric))
# Third max normal
max_normalthird <- data.frame(cbind(sapply(third[1:(length(third)-1)], max_normalization))
max_normalthird <- data.frame(sapply(max_normalthird, as.numeric), target = third$target))
# Third max normal
max_normalthird <- data.frame(cbind(sapply(third[1:(length(third)-1)], max_normalization))
max_normalthird <- data.frame(sapply(max_normalthird, as.numeric), target = third$target))
# Third max normal
max_normalthird <- data.frame(cbind(sapply(third[1:(length(third)-1)], max_normalization)))
max_normalthird <- data.frame(sapply(max_normalthird, as.numeric), target = third$target)
# Max normal third
cor(max_normalthird[1:(length(max_normalthird)-1)], as.integer(factor(max_normalthird$target)))
# Max normal third
cor(max_normalthird[1:(length(max_normalthird)-1)], as.integer(factor(max_normalthird$target)))
setwd("C:/Users/Stephanie/Documents/STAT385/Final Project/Stat-385-final-project") # set my working directory
first <- read.csv("Dfirst.csv") # read Dfirst data set
second <- read.csv("Dsecond.csv") # read Dsecond data set
third <- read.csv("Dthird.csv") # read Dthird data set
max_normal <- read.csv("max_normal.csv") # read max_normal data set (compact data normalized)
z_normal <- read.csv("z_normal.csv") # read z_normal data set (compact data normalized)
head(first) # first few rows of each column of first data set
levels(as.factor(first$target)) # levels of data set
# compact data set by Albert (unique features, contains only means though)
second1 <- second[,which(colnames(second)%in%colnames(first)==FALSE)]
third1 <- third[,which(colnames(third)%in%colnames(first)==FALSE&colnames(third)%in%colnames(second1)==FALSE)]
third1 <- third1[,which(colnames(third1)%in%colnames(second1)==FALSE)]
data = cbind(first,second1,third1)
compact_data <- cbind(first[,c(1,2,6,10,14)],second1[,c(1,5,9,13,17)])
compact_data$speed.mean <- third1[,1]
head(compact_data) # first few lines of comoact data
# target column moved to end of compact data frame
compact_data <- subset(compact_data, select=c(time:sound.mean, android.sensor.game_rotation_vector.mean:speed.mean, target))
head(max_normal) # first few rows of max normal data set
# target column moved to end of  max normal data frame and removed first column (first column was irrelevant, contained the number of each row)
max_normal <- subset(max_normal, select=c(time:sound.mean, android.sensor.game_rotation_vector.mean:speed.mean, target))
head(z_normal) # first few rows of z normal data set
# target column moved to end of z normal data frame and removed first column (first column was irrelevant, contained the number of each row)
z_normal <- subset(z_normal, select=c(time:sound.mean, android.sensor.game_rotation_vector.mean:speed.mean, target))
set.seed(2021) # set seed to get same sample each time (just for testing for now)
# Training Data set
# Create training data set
training <- sample(1:dim(compact_data)[1], 4000, replace = FALSE) # randomly sample 4000 rows
compact_datatrain <- compact_data[training,] # compact data training set
max_normaltrain <- max_normal[training,] # max normal training set
z_normaltrain <- z_normal[training,] # z normal traning data set
# Test data set
# Create test data set
testdata <- c(1:dim(compact_data)[1])[-training] # sample remaining rows
compact_datatest <- compact_data[testdata,] # compact data test set
max_normaltest <- max_normal[testdata,] # max normal test set
z_normaltest <- z_normal[testdata,] # z normal test data set
third_datatrain <-third[training,] # third training data set
thirdtest <- third[testdata,] # third test data set
max_normalization<-function(x)
{
norms<-(x-min(x))/(max(x)-min(x))
return(norms)
}
z_normalization <-function(x){
mu <- mean(x)
sigma <- sd(x)
z <- (x-mu)/sigma
return(z)
}
# Third max normal
max_normalthird <- data.frame(cbind(sapply(third[1:(length(third)-1)], max_normalization)))
max_normalthird <- data.frame(sapply(max_normalthird, as.numeric), target = third$target)
# Third z normal
z_normalthird <- data.frame(cbind(sapply(third[1:(length(third)-1)], z_normalization), target = third$target))
z_normalthird <- data.frame(sapply(z_normalthird, as.numeric), target = third$target) # made values as numeric
# Third z normal
z_normalthird <- data.frame(cbind(sapply(third[1:(length(third)-1)], z_normalization), target = third$target))
sapply(z_normalthird, as.numeric)
# Third z normal
z_normalthird <- data.frame(cbind(sapply(third[1:(length(third)-1)], z_normalization)))
z_normalthird <- data.frame(sapply(z_normalthird, as.numeric), target = third$target) # made values as numeric
z_normalthirdtrain <- z_normalthird[training,] # z normal third traning data set
max_normalthirdtrain <- max_normalthird[training,] # max normal third test set
z_normalthirdtest <- z_normalthird[testdata,] # z normal third test data set
max_normalthirdtest <- max_normalthird[testdata,] # max normal third test set
# Dfirst
cor(first[1:(length(first)-1)], as.integer(factor(first$target)))
# Dsecond
cor(second[1:(length(second)-1)], as.integer(factor(second$target)))
# Z normal third
cor(z_normalthird[1:(length(z_normalthird)-1)], as.integer(factor(z_normalthird$target)))
# Z normal third
cor(z_normalthird[1:(length(z_normalthird)-1)], as.integer(factor(z_normalthird$target)))
# Max Normal
for (i in 1:(length(max_normalthird)-1)) {
boxplot(max_normalthird[,i]~as.factor(max_normalthird$target), main=names(max_normalthird[i]))
}
# Z Normal
for (i in 1:(length(z_normalthird)-1)) {
boxplot(z_normalthird[,i]~as.factor(z_normalthird$target), main=names(z_normalthird[i]))
}
# Max Normal third
max_normalthird$target <- factor(max_normalthird$target)
formulae <- lapply(colnames(max_normalthird)[2:ncol(max_normalthird)-1], function(x) as.formula(paste0(x, " ~ target")))
anovamax_normalthird <- lapply(formulae, function(x) summary(aov(x, data = max_normalthird)))
names(anovamax_normalthird) <- format(formulae)
anovamax_normalthird # summary of anova test for each column with target
pmax_normalthird <- unlist(lapply(anovamax_normalthird, function(x) x[[1]]$"Pr(>F)"[1]))
pvaluesmax_normalthird <- data.frame(Sensor = sub(' ~ target', '', names(pmax_normalthird)), pvalue = pmax_normalthird)
pvaluesmax_normalthird # p-values from anova test in data frame
pvaluesfirst # p-values from anova test in data frame
# Dfirst
first$target <- factor(first$target)
formulae <- lapply(colnames(first)[2:ncol(first)-1], function(x) as.formula(paste0(x, " ~ target")))
anovafirst <- lapply(formulae, function(x) summary(aov(x, data = first)))
names(anovafirst) <- format(formulae)
anovafirst # summary of anova test for each column with target
pfirst <- unlist(lapply(anovafirst, function(x) x[[1]]$"Pr(>F)"[1]))
pvaluesfirst <- data.frame(Sensor = sub(' ~ target', '', names(pfirst)), pvalue = pfirst)
pvaluesfirst # p-values from anova test in data frame
pvaluesfirst # p-values from anova test in data frame
# Dsecond
second$target <- factor(second$target)
# Dsecond
second$target <- factor(second$target)
formulae <- lapply(colnames(second)[2:ncol(second)-1], function(x) as.formula(paste0(x, " ~ target")))
anovasecond <- lapply(formulae, function(x) summary(aov(x, data = second)))
names(anovasecond) <- format(formulae)
anovasecond # summary of anova test for each column with target
psecond <- unlist(lapply(anovasecond, function(x) x[[1]]$"Pr(>F)"[1]))
pvaluessecond <- data.frame(Sensor = sub(' ~ target', '', names(psecond)), pvalue = psecond)
pvaluessecond # p-values from anova test in data frame
# All features for compact data
compact_datatrain$target <- as.factor(compact_datatrain$target)
svm1 <- svm(target~., data=compact_datatrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm1) # summary of svm
svm1$SV # observation index and coefficients of the predictors for the support vectors
prediction1 <- predict(svm1, compact_datatest)
xtab1 <- table(compact_datatest$target, prediction1)
xtab1 # Bad for walking a lot of mis-classifications
svm1 <- svm(target~., data=compact_datatrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=5)
summary(svm1) # summary of svm
svm1$SV # observation index and coefficients of the predictors for the support vectors
prediction1 <- predict(svm1, compact_datatest)
xtab1 <- table(compact_datatest$target, prediction1)
xtab1 # Bad for walking a lot of mis-classifications
svm1 <- svm(target~., data=compact_datatrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=5)
summary(svm1) # summary of svm
svm1$SV # observation index and coefficients of the predictors for the support vectors
prediction1 <- predict(svm1, compact_datatest)
xtab1 <- table(compact_datatest$target, prediction1)
xtab1 # Bad for walking a lot of mis-classifications
radial
# High Positive Correlation for compact data
svm4 <- svm(target~android.sensor.accelerometer.mean + android.sensor.gyroscope.mean + android.sensor.gyroscope_uncalibrated.mean + android.sensor.linear_acceleration.mean, data=compact_datatrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=5)
summary(svm4) # summary of svm
svm4$SV # observation index and coefficients of the predictors for the support vectors
prediction4 <- predict(svm4, compact_datatest)
xtab4 <- table(compact_datatest$target, prediction4)
xtab4 # Bad for walking a lot of mis-classifications
svm1 <- svm(target~., data=compact_datatrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm1) # summary of svm
svm1$SV # observation index and coefficients of the predictors for the support vectors
prediction1 <- predict(svm1, compact_datatest)
xtab1 <- table(compact_datatest$target, prediction1)
xtab1 # Bad for walking a lot of mis-classifications
# All features for compact data
compact_datatrain$target <- as.factor(compact_datatrain$target)
svm1 <- svm(target~., data=compact_datatrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm1) # summary of svm
svm1$SV # observation index and coefficients of the predictors for the support vectors
prediction1 <- predict(svm1, compact_datatest)
xtab1 <- table(compact_datatest$target, prediction1)
xtab1 # Bad for walking a lot of mis-classifications
(244+171+237+230+342)/nrow(compact_datatest) # 64.6% (pretty bad)
# High Positive Correlation for compact data
svm4 <- svm(target~android.sensor.accelerometer.mean + android.sensor.gyroscope.mean + android.sensor.gyroscope_uncalibrated.mean + android.sensor.linear_acceleration.mean, data=compact_datatrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm4) # summary of svm
svm4$SV # observation index and coefficients of the predictors for the support vectors
prediction4 <- predict(svm4, compact_datatest)
xtab4 <- table(compact_datatest$target, prediction4)
xtab4 # Bad for walking a lot of mis-classifications
(182+116+353+190+295)/nrow(compact_datatest) # 60.0% (worse than all features for comact data)
# Based on boxplot differences and anova for compact data
svm7 <- svm(target~android.sensor.accelerometer.mean+android.sensor.gyroscope.mean+android.sensor.gyroscope_uncalibrated.mean+android.sensor.linear_acceleration.mean+speed.mean, data=compact_datatrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm7) # summary of svm
svm7$SV # observation index and coefficients of the predictors for the support vectors
prediction7 <- predict(svm7, compact_datatest)
xtab7 <- table(compact_datatest$target, prediction7)
xtab7 # Bad for walking a lot of mis-classifications
(202+235+360+213+300)/nrow(compact_datatest) # 69.2% (better than all featrues and high positive coefs)
xtab4 # Bad for walking a lot of mis-classifications
# All features for compact data
compact_datatrain$target <- as.factor(compact_datatrain$target)
svm1 <- svm(target~., data=compact_datatrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm1) # summary of svm
svm1$SV # observation index and coefficients of the predictors for the support vectors
prediction1 <- predict(svm1, compact_datatest)
xtab1 <- table(compact_datatest$target, prediction1)
xtab1 # Bad for walking a lot of mis-classifications
(243+173+237+230+342)/nrow(compact_datatest) # 64.6% (pretty bad)
# High Positive Correlation for compact data
svm4 <- svm(target~android.sensor.accelerometer.mean + android.sensor.gyroscope.mean + android.sensor.gyroscope_uncalibrated.mean + android.sensor.linear_acceleration.mean, data=compact_datatrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm4) # summary of svm
svm4$SV # observation index and coefficients of the predictors for the support vectors
prediction4 <- predict(svm4, compact_datatest)
xtab4 <- table(compact_datatest$target, prediction4)
xtab4 # Bad for walking a lot of mis-classifications
(187+121+330+227+298)/nrow(compact_datatest) # 60.0% (worse than all features for comact data)
# Based on boxplot differences and anova for compact data
svm7 <- svm(target~android.sensor.accelerometer.mean+android.sensor.gyroscope.mean+android.sensor.gyroscope_uncalibrated.mean+android.sensor.linear_acceleration.mean+speed.mean, data=compact_datatrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm7) # summary of svm
svm7$SV # observation index and coefficients of the predictors for the support vectors
prediction7 <- predict(svm7, compact_datatest)
xtab7 <- table(compact_datatest$target, prediction7)
xtab7 # Good for walking, but a lot of mis-classifications for the others
(219+230+366+257+304)/nrow(compact_datatest) # 69.2% (better than all featrues and high positive coefs)
# All features for max normal data
max_normaltrain$target <- as.factor(max_normaltrain$target)
svm2 <- svm(target~., data=max_normaltrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm2) # summary of svm
svm2$SV # observation index and coefficients of the predictors for the support vectors
prediction2 <- predict(svm2, max_normaltest)
xtab2 <- table(max_normaltest$target, prediction2)
xtab2 # Better than above, less mis-classifications especially for walking
(272+283+255+240+321)/nrow(max_normaltest) # 72.4% (better that compact data all features)
# High Positive Correlation for max normal data
svm5 <- svm(target~android.sensor.accelerometer.mean + android.sensor.gyroscope.mean + android.sensor.gyroscope_uncalibrated.mean + android.sensor.linear_acceleration.mean, data=max_normaltrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm5) # summary of svm
svm5$SV # observation index and coefficients of the predictors for the support vectors
prediction5 <- predict(svm5, max_normaltest)
xtab5 <- table(max_normaltest$target, prediction5)
xtab5 # Many misclassified for train
(137+49+2+335+286)/nrow(max_normaltest) # 42.7% (bad, worse than all features)
# Based on boxplot differences and anova for max normal data
svm8 <- svm(target~android.sensor.accelerometer.mean+android.sensor.gyroscope.mean+android.sensor.gyroscope_uncalibrated.mean+android.sensor.linear_acceleration.mean+speed.mean, data=max_normaltrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm8) # summary of svm
svm8$SV # observation index and coefficients of the predictors for the support vectors
prediction8 <- predict(svm8, max_normaltest)
xtab8 <- table(max_normaltest$target, prediction8)
xtab8 # Many misclassified
xtab8 # Many misclassified
(168+230+382+42+298)/nrow(max_normaltest) # 59.2% (pretty bad but better than high positive coefs)
# All features for max normal data
max_normaltrain$target <- as.factor(max_normaltrain$target)
svm2 <- svm(target~., data=max_normaltrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm2) # summary of svm
svm2$SV # observation index and coefficients of the predictors for the support vectors
prediction2 <- predict(svm2, max_normaltest)
xtab2 <- table(max_normaltest$target, prediction2)
xtab2 # Better than above, less mis-classifications especially for walking
(283+282+290+269+326)/nrow(max_normaltest) # 72.4% (better that compact data all features)
# High Positive Correlation for max normal data
svm5 <- svm(target~android.sensor.accelerometer.mean + android.sensor.gyroscope.mean + android.sensor.gyroscope_uncalibrated.mean + android.sensor.linear_acceleration.mean, data=max_normaltrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm5) # summary of svm
svm5$SV # observation index and coefficients of the predictors for the support vectors
prediction5 <- predict(svm5, max_normaltest)
xtab5 <- table(max_normaltest$target, prediction5)
xtab5 # Many misclassified for train
(151+127+373+91+292)/nrow(max_normaltest) # 42.7% (bad, worse than all features (worst of all so far))
xtab2 <- table(max_normaltest$target, prediction2)
xtab2 # Better than above, less mis-classifications especially for walking
# All features for max normal data
z_normaltrain$target <- as.factor(z_normaltrain$target)
svm3 <- svm(target~., data=z_normaltrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm3) # summary of svm
svm3$SV # observation index and coefficients of the predictors for the support vectors
prediction3 <- predict(svm3, z_normaltest)
xtab3 <- table(z_normaltest$target, prediction3)
xtab3 # Better than above, less mis-classifications especially for all of the targets
(334+302+337+313+341)/nrow(z_normaltest) # 85.9% (better than compact data and max normal all features)
# High Positive Correlation for z normal data
svm6 <- svm(target~android.sensor.accelerometer.mean + android.sensor.gyroscope.mean + android.sensor.gyroscope_uncalibrated.mean + android.sensor.linear_acceleration.mean, data=z_normaltrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm6) # summary of svm
svm6$SV # observation index and coefficients of the predictors for the support vectors
prediction6 <- predict(svm6, z_normaltest)
xtab6 <- table(z_normaltest$target, prediction6)
xtab6 # Better than above, less mis-classifications especially for all of the targets
(208+134+334+189+305)/nrow(z_normaltest) # 61.8% (worse than all features)
# Based on boxplot differences and anova for z normal data
svm9 <- svm(target~android.sensor.accelerometer.mean+android.sensor.gyroscope.mean+android.sensor.gyroscope_uncalibrated.mean+android.sensor.linear_acceleration.mean+speed.mean, data=z_normaltrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm9) # summary of svm
svm9$SV # observation index and coefficients of the predictors for the support vectors
prediction9 <- predict(svm9, z_normaltest)
xtab9 <- table(z_normaltest$target, prediction9)
xtab9 # Better than above, less mis-classifications especially for all of the targets
svm3 <- svm(target~., data=z_normaltrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm3) # summary of svm
svm3$SV # observation index and coefficients of the predictors for the support vectors
prediction3 <- predict(svm3, z_normaltest)
xtab3 <- table(z_normaltest$target, prediction3)
xtab3 # Better than above, less mis-classifications especially for all of the targets
(336+321+371+327+341)/nrow(z_normaltest) # 85.9% (better than compact data and max normal all features)
# High Positive Correlation for z normal data
svm6 <- svm(target~android.sensor.accelerometer.mean + android.sensor.gyroscope.mean + android.sensor.gyroscope_uncalibrated.mean + android.sensor.linear_acceleration.mean, data=z_normaltrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm6) # summary of svm
svm6$SV # observation index and coefficients of the predictors for the support vectors
prediction6 <- predict(svm6, z_normaltest)
xtab6 <- table(z_normaltest$target, prediction6)
xtab6 # Not better than above, but still less mis-classifications especially for all of the targets
(208+134+334+189+305)/nrow(z_normaltest) # 61.8% (worse than all features)
(212+129+329+206+303)/nrow(z_normaltest) # 61.8% (worse than all features)
# Based on boxplot differences and anova for z normal data
svm9 <- svm(target~android.sensor.accelerometer.mean+android.sensor.gyroscope.mean+android.sensor.gyroscope_uncalibrated.mean+android.sensor.linear_acceleration.mean+speed.mean, data=z_normaltrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm9) # summary of svm
svm9$SV # observation index and coefficients of the predictors for the support vectors
prediction9 <- predict(svm9, z_normaltest)
xtab9 <- table(z_normaltest$target, prediction9)
xtab9 # Not better than above, but less mis-classifications especially for all of the targets
(234+230+336+247+310)/nrow(z_normaltest) # 70.0% (worse than all features but better than coefs)
# All features for third data
third_datatrain$target <- as.factor(third_datatrain$target)
svm10 <- svm(target~., data=third_datatrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm10) # summary of svm
svm10$SV # observation index and coefficients of the predictors for the support vectors
prediction10 <- predict(svm10, thirdtest)
xtab10 <- table(thirdtest$target, prediction10)
xtab10 # Bad for walking a lot of mis-classifications
(238+173+281+246+360)/nrow(thirdtest) # 68.6% (a little bad)
# High positive correlation for third data set
svm11 <- svm(target~android.sensor.accelerometer.mean+android.sensor.accelerometer.max+android.sensor.accelerometer.std+android.sensor.gyroscope.mean+android.sensor.gyroscope.min+android.sensor.gyroscope.max+android.sensor.gyroscope.std+android.sensor.gyroscope_uncalibrated.mean+android.sensor.gyroscope_uncalibrated.min+android.sensor.gyroscope_uncalibrated.max+android.sensor.gyroscope_uncalibrated.std+android.sensor.linear_acceleration.mean+android.sensor.linear_acceleration.min+android.sensor.linear_acceleration.max+android.sensor.linear_acceleration.std, data=third_datatrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm11) # summary of svm
svm11$SV # observation index and coefficients of the predictors for the support vectors
prediction11 <- predict(svm11, thirdtest)
xtab11 <- table(thirdtest$target, prediction11)
xtab11 # many misclassified throughout
(197+188+357+206+298)/nrow(thirdtest) # 65.8% (a little worse than above with all features for third data set)
# Small p-vlaue for anova
svm12 <- svm(target~android.sensor.accelerometer.mean+android.sensor.accelerometer.min+android.sensor.accelerometer.max+android.sensor.accelerometer.std+android.sensor.gyroscope.mean+android.sensor.gyroscope.min+android.sensor.gyroscope.max+android.sensor.gyroscope.std+android.sensor.gyroscope_uncalibrated.mean+android.sensor.gyroscope_uncalibrated.min+android.sensor.gyroscope_uncalibrated.max+android.sensor.gyroscope_uncalibrated.std+android.sensor.linear_acceleration.mean+android.sensor.linear_acceleration.min+android.sensor.linear_acceleration.max+android.sensor.linear_acceleration.std+speed.mean+speed.min+speed.max, data=third_datatrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm12) # summary of svm
svm12$SV # observation index and coefficients of the predictors for the support vectors
prediction12 <- predict(svm12, thirdtest)
xtab12 <- table(thirdtest$target, prediction12)
xtab12 # A decent amount are misclassified for each section
(238+258+359+252+305)/nrow(thirdtest) # 74.6% (way better than correlation and all features)
# All features for third data
third_datatrain$target <- as.factor(third_datatrain$target)
svm10 <- svm(target~., data=third_datatrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm10) # summary of svm
svm10$SV # observation index and coefficients of the predictors for the support vectors
prediction10 <- predict(svm10, thirdtest)
xtab10 <- table(thirdtest$target, prediction10)
xtab10 # Bad for walking a lot of mis-classifications
(238+173+281+246+360)/nrow(thirdtest) # 68.6% (a little bad)
# High positive correlation for third data set
svm11 <- svm(target~android.sensor.accelerometer.mean+android.sensor.accelerometer.max+android.sensor.accelerometer.std+android.sensor.gyroscope.mean+android.sensor.gyroscope.min+android.sensor.gyroscope.max+android.sensor.gyroscope.std+android.sensor.gyroscope_uncalibrated.mean+android.sensor.gyroscope_uncalibrated.min+android.sensor.gyroscope_uncalibrated.max+android.sensor.gyroscope_uncalibrated.std+android.sensor.linear_acceleration.mean+android.sensor.linear_acceleration.min+android.sensor.linear_acceleration.max+android.sensor.linear_acceleration.std, data=third_datatrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm11) # summary of svm
svm11$SV # observation index and coefficients of the predictors for the support vectors
prediction11 <- predict(svm11, thirdtest)
xtab11 <- table(thirdtest$target, prediction11)
xtab11 # many misclassified throughout
(207+216+358+216+300)/nrow(thirdtest) # 65.8% (a little worse than above with all features for third data set)
svm10 <- svm(target~., data=third_datatrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm10) # summary of svm
svm10$SV # observation index and coefficients of the predictors for the support vectors
prediction10 <- predict(svm10, thirdtest)
xtab10 <- table(thirdtest$target, prediction10)
xtab10 # Bad for walking a lot of mis-classifications
# Small p-vlaue for anova
svm12 <- svm(target~android.sensor.accelerometer.mean+android.sensor.accelerometer.min+android.sensor.accelerometer.max+android.sensor.accelerometer.std+android.sensor.gyroscope.mean+android.sensor.gyroscope.min+android.sensor.gyroscope.max+android.sensor.gyroscope.std+android.sensor.gyroscope_uncalibrated.mean+android.sensor.gyroscope_uncalibrated.min+android.sensor.gyroscope_uncalibrated.max+android.sensor.gyroscope_uncalibrated.std+android.sensor.linear_acceleration.mean+android.sensor.linear_acceleration.min+android.sensor.linear_acceleration.max+android.sensor.linear_acceleration.std+speed.mean+speed.min+speed.max, data=third_datatrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm12) # summary of svm
svm12$SV # observation index and coefficients of the predictors for the support vectors
prediction12 <- predict(svm12, thirdtest)
xtab12 <- table(thirdtest$target, prediction12)
xtab12 # A decent amount are misclassified for each section
(249+273+370+265+305)/nrow(thirdtest) # 74.6% (way better than correlation and all features)
# Compact data
compact_data$target <- factor(compact_data$target)
formulae <- lapply(colnames(compact_data)[2:ncol(compact_data)-1], function(x) as.formula(paste0(x, " ~ target")))
anovacompact_data <- lapply(formulae, function(x) summary(aov(x, data = compact_data)))
names(anovacompact_data) <- format(formulae)
anovacompact_data # summary of anova test for each column with target
pcompact_data <- unlist(lapply(anovacompact_data, function(x) x[[1]]$"Pr(>F)"[1]))
pvaluescompact_data <- data.frame(Sensor = sub(' ~ target', '', names(pcompact_data)), pvalue = pcompact_data)
pvaluescompact_data # p-values from anova test in data frame
View(z_normalthird)
# Max Normal third
max_normalthird$target <- factor(max_normalthird$target)
formulae <- lapply(colnames(max_normalthird)[2:ncol(max_normalthird)-1], function(x) as.formula(paste0(x, " ~ target")))
anovamax_normalthird <- lapply(formulae, function(x) summary(aov(x, data = max_normalthird)))
names(anovamax_normalthird) <- format(formulae)
anovamax_normalthird # summary of anova test for each column with target
pmax_normalthird <- unlist(lapply(anovamax_normalthird, function(x) x[[1]]$"Pr(>F)"[1]))
pvaluesmax_normalthird <- data.frame(Sensor = sub(' ~ target', '', names(pmax_normalthird)), pvalue = pmax_normalthird)
pvaluesmax_normalthird # p-values from anova test in data frame
# Z Normal third
z_normalthird$target <- factor(z_normalthird$target)
formulae <- lapply(colnames(z_normalthird)[2:ncol(z_normalthird)-1], function(x) as.formula(paste0(x, " ~ target")))
anovaz_normalthird <- lapply(formulae, function(x) summary(aov(x, data = z_normalthird)))
names(anovaz_normalthird) <- format(formulae)
anovaz_normalthird # summary of anova test for each column with target
pz_normalthird <- unlist(lapply(anovaz_normalthird, function(x) x[[1]]$"Pr(>F)"[1]))
pvaluesz_normalthird <- data.frame(Sensor = sub(' ~ target', '', names(pz_normalthird)), pvalue = pz_normalthird)
pvaluesz_normalthird # p-values from anova test in data frame
# High positive correlation for third data set
svm14 <- svm(target~android.sensor.accelerometer.mean+android.sensor.accelerometer.max+android.sensor.accelerometer.std+android.sensor.gyroscope.mean+android.sensor.gyroscope.min+android.sensor.gyroscope.max+android.sensor.gyroscope.std+android.sensor.gyroscope_uncalibrated.mean+android.sensor.gyroscope_uncalibrated.min+android.sensor.gyroscope_uncalibrated.max+android.sensor.gyroscope_uncalibrated.std+android.sensor.linear_acceleration.mean+android.sensor.linear_acceleration.min+android.sensor.linear_acceleration.max+android.sensor.linear_acceleration.std+android.sensor.orientation.std, data=max_normalthirdtrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
View(max_normalthirdtrain)
View(max_normalthirdtrain)
View(max_normal)
View(max_normal)
# High positive correlation for third data set
svm14 <- svm(target~android.sensor.accelerometer.mean+android.sensor.accelerometer.max+android.sensor.accelerometer.std+android.sensor.gyroscope.mean+android.sensor.gyroscope.min+android.sensor.gyroscope.max+android.sensor.gyroscope.std+android.sensor.gyroscope_uncalibrated.mean+android.sensor.gyroscope_uncalibrated.min+android.sensor.gyroscope_uncalibrated.max+android.sensor.gyroscope_uncalibrated.std+android.sensor.linear_acceleration.mean+android.sensor.linear_acceleration.min+android.sensor.linear_acceleration.max+android.sensor.linear_acceleration.std+android.sensor.orientation.std, data=max_normalthirdtrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
# All features for third data
max_normalthirdtrain$target <- as.factor(max_normalthirdtrain$target)
svm13 <- svm(target~., data=max_normalthirdtrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
# Small p-vlaue for anova
svm15 <- svm(target~android.sensor.accelerometer.mean+android.sensor.accelerometer.min+android.sensor.accelerometer.max+android.sensor.accelerometer.std+android.sensor.gyroscope.mean+android.sensor.gyroscope.min+android.sensor.gyroscope.max+android.sensor.gyroscope.std+android.sensor.gyroscope_uncalibrated.mean+android.sensor.gyroscope_uncalibrated.min+android.sensor.gyroscope_uncalibrated.max+android.sensor.gyroscope_uncalibrated.std+android.sensor.linear_acceleration.mean+android.sensor.linear_acceleration.min+android.sensor.linear_acceleration.max+android.sensor.linear_acceleration.std+speed.mean+speed.min+speed.max, data=max_normalthirdtrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm15) # summary of svm
svm15$SV # observation index and coefficients of the predictors for the support vectors
prediction15 <- predict(svm15, max_normalthirdtest)
xtab15 <- table(max_normalthirdtest$target, prediction15)
xtab15 # A decent amount are misclassified for each section
(214+230+379+42+301)/nrow(max_normalthirdtest) # 74.6% (way better than correlation and all features)
# High positive correlation for third data set
svm14 <- svm(target~android.sensor.accelerometer.mean+android.sensor.accelerometer.max+android.sensor.accelerometer.std+android.sensor.gyroscope.mean+android.sensor.gyroscope.min+android.sensor.gyroscope.max+android.sensor.gyroscope.std+android.sensor.gyroscope_uncalibrated.mean+android.sensor.gyroscope_uncalibrated.min+android.sensor.gyroscope_uncalibrated.max+android.sensor.gyroscope_uncalibrated.std+android.sensor.linear_acceleration.mean+android.sensor.linear_acceleration.min+android.sensor.linear_acceleration.max+android.sensor.linear_acceleration.std+android.sensor.orientation.std, data=max_normalthirdtrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm14) # summary of svm
svm14$SV # observation index and coefficients of the predictors for the support vectors
prediction14 <- predict(svm14, max_normalthirdtest)
xtab14 <- table(max_normalthirdtest$target, prediction14)
xtab14 # many misclassified throughout
(99+114+0+337+290)/nrow(max_normalthirdtest) # 65.8% (a little worse than above with all features for third data set)
svm13 <- svm(target~., data=max_normalthirdtrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm13) # summary of svm
svm13$SV # observation index and coefficients of the predictors for the support vectors
prediction13 <- predict(svm13, max_normalthirdtest)
xtab13 <- table(max_normalthirdtest$target, prediction13)
xtab13 # Bad for walking a lot of mis-classifications
(277+304+304+277+319)/nrow(max_normalthirdtest) # 74.3% (a little worse than third data small p-values anova features, but better than third data high positive coefs and all feature)
# High positive correlation for third data set
svm14 <- svm(target~android.sensor.accelerometer.mean+android.sensor.accelerometer.max+android.sensor.accelerometer.std+android.sensor.gyroscope.mean+android.sensor.gyroscope.min+android.sensor.gyroscope.max+android.sensor.gyroscope.std+android.sensor.gyroscope_uncalibrated.mean+android.sensor.gyroscope_uncalibrated.min+android.sensor.gyroscope_uncalibrated.max+android.sensor.gyroscope_uncalibrated.std+android.sensor.linear_acceleration.mean+android.sensor.linear_acceleration.min+android.sensor.linear_acceleration.max+android.sensor.linear_acceleration.std+android.sensor.orientation.std, data=max_normalthirdtrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm14) # summary of svm
svm14$SV # observation index and coefficients of the predictors for the support vectors
prediction14 <- predict(svm14, max_normalthirdtest)
xtab14 <- table(max_normalthirdtest$target, prediction14)
xtab14 # many misclassified throughout
(158+194+381+118+294)/nrow(max_normalthirdtest) # 44.4% (a lot worse than all features)
# Small p-vlaue for anova
svm15 <- svm(target~android.sensor.accelerometer.mean+android.sensor.accelerometer.min+android.sensor.accelerometer.max+android.sensor.accelerometer.std+android.sensor.gyroscope.mean+android.sensor.gyroscope.min+android.sensor.gyroscope.max+android.sensor.gyroscope.std+android.sensor.gyroscope_uncalibrated.mean+android.sensor.gyroscope_uncalibrated.min+android.sensor.gyroscope_uncalibrated.max+android.sensor.gyroscope_uncalibrated.std+android.sensor.linear_acceleration.mean+android.sensor.linear_acceleration.min+android.sensor.linear_acceleration.max+android.sensor.linear_acceleration.std+speed.mean+speed.min+speed.max, data=max_normalthirdtrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm15) # summary of svm
svm15$SV # observation index and coefficients of the predictors for the support vectors
prediction15 <- predict(svm15, max_normalthirdtest)
xtab15 <- table(max_normalthirdtest$target, prediction15)
xtab15 # A decent amount are misclassified for each section
(235+241+378+83+309)/nrow(max_normalthirdtest) # 61.6% (a lot worse than all features but better than coefs)
# All features for third data
z_normalthirdtrain$target <- as.factor(z_normalthirdtrain$target)
svm16 <- svm(target~., data=z_normalthirdtrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm16) # summary of svm
svm16$SV # observation index and coefficients of the predictors for the support vectors
prediction16 <- predict(svm16, z_normalthirdtest)
xtab16 <- table(z_normalthirdtest$target, prediction16)
xtab16 # Bad for walking a lot of mis-classifications
(321+329+336+321+344)/nrow(z_normalthirdtest) # 74.3% (a little worse than third data small p-values anova features, but better than third data high positive coefs and all feature)
# High positive correlation for third data set
svm17 <- svm(target~android.sensor.accelerometer.mean+android.sensor.accelerometer.max+android.sensor.accelerometer.std+android.sensor.gyroscope.mean+android.sensor.gyroscope.min+android.sensor.gyroscope.max+android.sensor.gyroscope.std+android.sensor.gyroscope_uncalibrated.mean+android.sensor.gyroscope_uncalibrated.min+android.sensor.gyroscope_uncalibrated.max+android.sensor.gyroscope_uncalibrated.std+android.sensor.linear_acceleration.mean+android.sensor.linear_acceleration.min+android.sensor.linear_acceleration.max+android.sensor.linear_acceleration.std+android.sensor.orientation.std, data=z_normalthirdtrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm17) # summary of svm
svm17$SV # observation index and coefficients of the predictors for the support vectors
prediction17 <- predict(svm17, z_normalthirdtest)
xtab17 <- table(z_normalthirdtest$target, prediction17)
xtab17 # many misclassified throughout
(206+219+369+176+313)/nrow(z_normalthirdtest) # 44.4% (a lot worse than all features)
# Small p-vlaue for anova
svm18 <- svm(target~android.sensor.accelerometer.mean+android.sensor.accelerometer.min+android.sensor.accelerometer.max+android.sensor.accelerometer.std+android.sensor.gyroscope.mean+android.sensor.gyroscope.min+android.sensor.gyroscope.max+android.sensor.gyroscope.std+android.sensor.gyroscope_uncalibrated.mean+android.sensor.gyroscope_uncalibrated.min+android.sensor.gyroscope_uncalibrated.max+android.sensor.gyroscope_uncalibrated.std+android.sensor.linear_acceleration.mean+android.sensor.linear_acceleration.min+android.sensor.linear_acceleration.max+android.sensor.linear_acceleration.std+speed.mean+speed.min+speed.max, data=z_normalthirdtrain, method="C-classification", scale = FALSE, kernal="radial", cost=5)
summary(svm18) # summary of svm
svm18$SV # observation index and coefficients of the predictors for the support vectors
prediction18 <- predict(svm18, z_normalthirdtest)
xtab18 <- table(z_normalthirdtest$target, prediction18)
xtab18 # A decent amount are misclassified for each section
(243+268+370+214+314)/nrow(z_normalthirdtest) # 61.6% (a lot worse than all features but better than coefs)
svm16 <- svm(target~., data=z_normalthirdtrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm16) # summary of svm
svm16$SV # observation index and coefficients of the predictors for the support vectors
prediction16 <- predict(svm16, z_normalthirdtest)
xtab16 <- table(z_normalthirdtest$target, prediction16)
xtab16 # not that many are mis classified
(346+340+367+326+343)/nrow(z_normalthirdtest) # 87.2% (pretty good)
# High positive correlation for third data set
svm17 <- svm(target~android.sensor.accelerometer.mean+android.sensor.accelerometer.max+android.sensor.accelerometer.std+android.sensor.gyroscope.mean+android.sensor.gyroscope.min+android.sensor.gyroscope.max+android.sensor.gyroscope.std+android.sensor.gyroscope_uncalibrated.mean+android.sensor.gyroscope_uncalibrated.min+android.sensor.gyroscope_uncalibrated.max+android.sensor.gyroscope_uncalibrated.std+android.sensor.linear_acceleration.mean+android.sensor.linear_acceleration.min+android.sensor.linear_acceleration.max+android.sensor.linear_acceleration.std+android.sensor.orientation.std, data=z_normalthirdtrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm17) # summary of svm
svm17$SV # observation index and coefficients of the predictors for the support vectors
prediction17 <- predict(svm17, z_normalthirdtest)
xtab17 <- table(z_normalthirdtest$target, prediction17)
xtab17 # many misclassified throughout
(214+227+366+202+312)/nrow(z_normalthirdtest) # 67.8% (a lot worse than all features)
# Small p-vlaue for anova
svm18 <- svm(target~android.sensor.accelerometer.mean+android.sensor.accelerometer.min+android.sensor.accelerometer.max+android.sensor.accelerometer.std+android.sensor.gyroscope.mean+android.sensor.gyroscope.min+android.sensor.gyroscope.max+android.sensor.gyroscope.std+android.sensor.gyroscope_uncalibrated.mean+android.sensor.gyroscope_uncalibrated.min+android.sensor.gyroscope_uncalibrated.max+android.sensor.gyroscope_uncalibrated.std+android.sensor.linear_acceleration.mean+android.sensor.linear_acceleration.min+android.sensor.linear_acceleration.max+android.sensor.linear_acceleration.std+speed.mean+speed.min+speed.max, data=z_normalthirdtrain, method="C-classification", scale = FALSE, kernal="polynomial", cost=40, degree=5)
summary(svm18) # summary of svm
svm18$SV # observation index and coefficients of the predictors for the support vectors
prediction18 <- predict(svm18, z_normalthirdtest)
xtab18 <- table(z_normalthirdtest$target, prediction18)
xtab18 # A decent amount are misclassified for each section
(237+279+372+253+310)/nrow(z_normalthirdtest) # 74.4% (worse than all features, better than strong positive coefs)
